<?xml version="1.0" encoding="UTF-8"?>
<LightningBundle xmlns="http://soap.sforce.com/2006/04/metadata">
	<manifest_file>
		<manifest_name>PollOptions.cmp</manifest_name>
		<manifest_text>&lt;aura:component controller=&quot;sfsiPoll.PollController&quot;&gt;
    &lt;aura:attribute type=&quot;sfsiPoll__Poll_Question__c&quot; name=&quot;poll&quot; /&gt;
    &lt;aura:attribute type=&quot;sfsiPoll__Poll_Option__c[]&quot; name=&quot;options&quot; /&gt;
    &lt;aura:attribute type=&quot;boolean&quot; name=&quot;hasResponded&quot; /&gt;
    &lt;aura:attribute type=&quot;string&quot; name=&quot;errorMsg&quot; /&gt;
    
    &lt;aura:handler name=&quot;init&quot; value=&quot;{!this}&quot; action=&quot;{!c.doInit}&quot; /&gt;
    
    &lt;div style=&quot;clear: both; text-align: center&quot;&gt;
        &lt;aura:renderIf isTrue=&quot;{!v.hasResponded}&quot;&gt;
            &lt;sfsiPoll:PollResults options=&quot;{!v.options}&quot;/&gt;
        &lt;/aura:renderIf&gt; 
        
        &lt;aura:renderIf isTrue=&quot;{!v.hasResponded == null || v.hasResponded == false}&quot;&gt;
            &lt;aura:renderIf isTrue=&quot;{!v.poll.sfsiPoll__Image__c != null}&quot;&gt;
                &lt;br/&gt;
                &lt;div&gt;
                    &lt;img class=&quot;large-image&quot; 
                         src=&quot;{!v.poll.sfsiPoll__Image__c}&quot;/&gt;    
                &lt;/div&gt;
            &lt;/aura:renderIf&gt;
            
            &lt;br/&gt;
            &lt;div&gt;
                &lt;aura:iteration items=&quot;{!v.options}&quot; var=&quot;opt&quot;&gt;
                    &lt;ui:button label=&quot;{!opt.Name}&quot; 
                               press=&quot;{!c.optionClick}&quot;&gt;&lt;/ui:button&gt;
                &lt;/aura:iteration&gt;
                
                &lt;aura:renderIf isTrue=&quot;{!v.errorMsg != null}&quot;&gt;
                    &lt;br/&gt;
					&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;{!v.errorMsg}&lt;/div&gt;                
                &lt;/aura:renderIf&gt;
            &lt;/div&gt;
        &lt;/aura:renderIf&gt; 
	&lt;/div&gt;
    
&lt;/aura:component&gt;</manifest_text>
	</manifest_file>
	<manifest_file>
		<manifest_name>PollOptions.cmp-meta.xml</manifest_name>
		<manifest_xml>
			<?xml version="1.0" encoding="UTF-8"?>
			<AuraDefinitionBundle xmlns="http://soap.sforce.com/2006/04/metadata">
				<apiVersion>36.0</apiVersion>
				<description>DESCRIPTION</description>
			</AuraDefinitionBundle>
		</manifest_xml>
	</manifest_file>
	<manifest_file>
		<manifest_name>PollOptions.css</manifest_name>
		<manifest_text>.THIS .large-image {
    max-width: 100%;
    height: auto;
}</manifest_text>
	</manifest_file>
	<manifest_file>
		<manifest_name>PollOptionsController.js</manifest_name>
		<manifest_text>({
	doInit : function(component, event, helper) {
		helper.loadOptions(component);
	},
	optionClick : function(component, event, helper) {
        var target;
        if(event.getSource){
            target = event.getSource();
            var selOption = target.get(&apos;v.label&apos;);
            helper.saveResponse(component, selOption);
        }
	}
})</manifest_text>
	</manifest_file>
	<manifest_file>
		<manifest_name>PollOptionsHelper.js</manifest_name>
		<manifest_text>({
	loadOptions : function(cmp) {
        // Load all polls data
        var action = cmp.get(&quot;c.getOptions&quot;);
        action.setParams({ question : cmp.get(&quot;v.poll&quot;) });
        
        var self = this;
        action.setCallback(this, function(response){
            var state = response.getState();
            if (state === &quot;SUCCESS&quot;) {
                cmp.set(&quot;v.options&quot;, response.getReturnValue());
            }
        });
        $A.enqueueAction(action);		
	},
    saveResponse : function(cmp, selOption){
        var action = cmp.get(&quot;c.saveResponse&quot;);
        action.setParams({ question : cmp.get(&quot;v.poll&quot;), optionName : selOption});
        
        action.setCallback(this, function(response){
            var state = response.getState();
            
            if (state === &quot;SUCCESS&quot;) {
                cmp.set(&quot;v.options&quot;, response.getReturnValue());
                cmp.set(&quot;v.hasResponded&quot;, true);
            } else {
                cmp.set(&quot;v.errorMsg&quot;, &quot;Oh Snap! There was an error in saving your response. Please contact your system administrator.&quot;);
            }
        });
        $A.enqueueAction(action);		
    }
})</manifest_text>
	</manifest_file>
</LightningBundle>
